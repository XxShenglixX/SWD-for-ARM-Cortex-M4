#ifndef CoreDebug_Utilities_H
#define CoreDebug_Utilities_H

#include <stdint.h>

#define DHCSR_REG   0xE000EDF0
#define DFSR_REG	  0xE000ED30
#define DEMCR_REG	  0xE000EDFC	
#define DCRSR_REG	  0xE000EDF4	  
#define DCRDR_REG 	0xE000EDF8

#define AIRCR_REG   0xE000ED0C

#define SET_CORE_NORMAL				    0xA05F0000
#define SET_CORE_NORMAL_MASKINT		0xA05F0008
#define SET_CORE_DEBUG 				    0xA05F0001
#define SET_CORE_DEBUG_HALT 	  	0xA05F0003
#define SET_CORE_STEP				      0xA05F0005
#define SET_CORE_STEP_MASKINT		  0xA05F000D
#define SET_CORE_SNAPSTALL			  0xA05F0023

#define REQUEST_SYSTEM_RESET      0xFA050004

#define DHCSR_S_HALT_MASK		      0x20000
#define DHCSR_S_REGRDY_MASK		    0x10000
#define DHCSR_C_SNAPSTALL_MASK	  0x10
#define DHCSR_C_MASKINTS_MASK	    0x8
#define DHCSR_C_STEP_MASK		      0x4
#define DHCSR_C_HALT_MASK		      0x2
#define DHCSR_C_DEBUGEN_MASK	    0x1

#define CORE_REG_READ   0
#define CORE_REG_WRITE  0x10000

#define DFSR_EXTERNAL_MASK	0x00000010
#define DFSR_VCATCH_MASK	  0x00000008
#define DFSR_DWTTRAP_MASK	  0x00000004
#define DFSR_BKPT_MASK		  0x00000002
#define DFSR_HALTED_MASK	  0x00000001

#define CLEAR_EXTERNAL_EVENT  0x10     
#define CLEAR_VCATCH_EVENT    0x8
#define CLEAR_DWTTRAP_EVENT   0x4
#define CLEAR_BKPT_EVENT      0x2
#define CLEAR_HALTED_EVENT    0x1

#define DEMCR_TRCENA_MASK		      0x1000000
#define DEMCR_MON_REQ_MASK		    0x80000
#define DEMCR_MON_STEP_MASK		    0x40000
#define DEMCR_MON_PEND_MASK		    0x20000
#define DEMCR_MON_EN_MASK		      0x10000
#define DEMCR_VC_HARDERR_MASK	    0x400
#define DEMCR_VC_INTERR_MASK	    0x200
#define DEMCR_VC_BUSERR_MASK	    0x100
#define DEMCR_VC_STATERR_MASK	    0x80
#define DEMCR_VC_CHKERR_MASK	    0x40
#define DEMCR_VC_NOCPERR_MASK	    0x20
#define DEMCR_VC_MMERR_MASK		    0x10
#define DEMCR_VC_CORERESET_MASK	  0x1

#define ENABLE_DWT_ITM	1
#define DISABLE_DWT_ITM 0

typedef enum 
{
	CORE_NORMAL_MODE,
	CORE_NORMAL_MASKINT,
	CORE_DEBUG_MODE,
	CORE_DEBUG_HALT,
	CORE_SINGLE_STEP,
	CORE_SINGLE_STEP_MASKINT,
	CORE_SNAPSTALL
}CoreMode ;


typedef enum
{
	CORE_REG_R0 = 0,
	CORE_REG_R1,
	CORE_REG_R2,
	CORE_REG_R3,
	CORE_REG_R4,
	CORE_REG_R5,
	CORE_REG_R6,
	CORE_REG_R7,
	CORE_REG_R8,
	CORE_REG_R9,
	CORE_REG_R10,
	CORE_REG_R11,
	CORE_REG_R12,
	CORE_REG_SP,
	CORE_REG_LR,
	CORE_REG_PC,
	CORE_REG_xPSR,
	CORE_REG_MSP,
	CORE_REG_PSP,
	CORE_REG_SR,
	CORE_REG_FPSCR = 33,
	CORE_REG_FPREGS0 = 64,
	CORE_REG_FPREGS1 ,
	CORE_REG_FPREGS2 ,
	CORE_REG_FPREGS3 ,
	CORE_REG_FPREGS4 ,
	CORE_REG_FPREGS5 ,
	CORE_REG_FPREGS6 ,
	CORE_REG_FPREGS7 ,
	CORE_REG_FPREGS8 ,
	CORE_REG_FPREGS9 ,
	CORE_REG_FPREGS10 ,
	CORE_REG_FPREGS11 ,
	CORE_REG_FPREGS12 ,
	CORE_REG_FPREGS13 ,
	CORE_REG_FPREGS14 ,
	CORE_REG_FPREGS15 ,
	CORE_REG_FPREGS16 ,
	CORE_REG_FPREGS17 ,
	CORE_REG_FPREGS18 ,
	CORE_REG_FPREGS19 ,
	CORE_REG_FPREGS20 ,
	CORE_REG_FPREGS21 ,
	CORE_REG_FPREGS22 ,
	CORE_REG_FPREGS23 ,
	CORE_REG_FPREGS24 ,
	CORE_REG_FPREGS25 ,
	CORE_REG_FPREGS26 ,
	CORE_REG_FPREGS27 ,
	CORE_REG_FPREGS28 ,
	CORE_REG_FPREGS29 ,
	CORE_REG_FPREGS30 ,
	CORE_REG_FPREGS31 = 95
}CoreRegister;

typedef enum 
{
  EXTERNAL_DEBUGEVENT ,
  VCATCH_DEBUGEVENT ,
  DWTTRAP_DEBUGEVENT ,
  BKPT_DEBUGEVENT ,
  HALTED_DEBUGEVENT ,
}DebugEvent ;

typedef enum 
{
  VC_DISABLEALL = 0 ,
  VC_CORERESET = 1 ,
  VC_MMERR = 0x10 ,
  VC_NOCPERR,
  VC_CHKERR ,
  VC_STATERR ,
  VC_BUSERR ,
  VC_INTERR ,
  VC_HARDERR = 0x400,
}VectorCatch ;

CoreMode determineCoreModeFromDataRead(uint32_t dataRead);
int isCoreModeRequiresHaltedAndDebug(CoreMode mode);
uint32_t getCoreModeConfiguration(CoreMode mode);
uint32_t getClearDebugEventConfiguration(DebugEvent debugEvent);
#endif // CoreDebug_Utilities_H
